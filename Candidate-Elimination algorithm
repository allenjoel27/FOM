import csv

def read_csv(file_path):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        data = list(reader)
    return data

def more_general(h1, h2):
    more_general_parts = []
    for x, y in zip(h1, h2):
        mg = x == '?' or (x != '0' and (x == y or y == '0'))
        more_general_parts.append(mg)
    return all(more_general_parts)

def fulfills(example, hypothesis):
    return all(h == '?' or h == e for h, e in zip(hypothesis, example))

def generalize_S(example, S):
    new_S = list(S)
    for i in range(len(S)):
        if S[i] != example[i]:
            new_S[i] = '?'
    return new_S

def specialize_G(example, G, domains):
    new_G = []
    for g in G:
        if fulfills(example[:-1], g):
            continue
        for i in range(len(g)):
            if g[i] == '?':
                for val in domains[i]:
                    if val != example[i]:
                        new_hypothesis = g[:i] + [val] + g[i+1:]
                        if any(more_general(g1, new_hypothesis) for g1 in G):
                            new_G.append(new_hypothesis)
    return new_G

def candidate_elimination(training_data):
    domains = [set([x[i] for x in training_data]) for i in range(len(training_data[0])-1)]
    S = ['0'] * (len(training_data[0])-1)
    G = [['?'] * (len(training_data[0])-1)]

    for example in training_data:
        if example[-1] == 'Yes':
            G = [g for g in G if fulfills(example[:-1], g)]
            S = generalize_S(example, S)
        else:
            S = [s for s in [S] if not fulfills(example[:-1], s)]
            G = specialize_G(example, G, domains)

    return S, G

# Replace 'C:\\Users\\VasanthaKumar\\Documents\\samplefile.csv' with your actual file path
file_path = r"C:\Users\VasanthaKumar\Documents\samplefile.csv"
training_data = read_csv(file_path)

# Apply the Candidate-Elimination algorithm
S, G = candidate_elimination(training_data)

print("Specific Boundary (S):", S)
print("General Boundary (G):", G)
